<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notepack</title>
    <description>A randomized pack of notes</description>
    <link>http://jakub.marchwicki.pl/</link>
    <atom:link href="http://jakub.marchwicki.pl/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 05 Dec 2020 17:51:16 +0000</pubDate>
    <lastBuildDate>Sat, 05 Dec 2020 17:51:16 +0000</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>How to train your bash?</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have to confess. The title is not mine. It&amp;#8217;s from &lt;a href=&quot;http://segfault.events/sites/gdansk2019/abstracts/jak-wytresowac-basha/&quot;&gt;Marcin&amp;#8217;s talk at Segfault University in Gdańsk&lt;/a&gt;. But I decided to borrow it, as we tackle similar principle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In one of my recent projects, I was working with a sizeable dataset. It wasn&amp;#8217;t big data. It wasn&amp;#8217;t even medium data. It was a small data, but big enough to kill most of the visual editing tools (except vim). The files were either XML or JSON from a SOAP / REST services, easily exceeding 10 megabytes each. One of the daily routines was to check some data and compare (between different outputs). To avoid tedious visual comparison, I&amp;#8217;ve come up with an ingenious set of bash tools, which I&amp;#8217;d like to share with you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-bit-of-history&quot;&gt;A bit of history&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To give a slight context, the files and examples I&amp;#8217;ll be describing were all about public transportation data (like timetables) - but was principles applies to any other sizeable data structure. An XML document for a single bus fleet in my city, for a single day, is around 10MB in size. There are ten different bus or trams fleets in the area.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My primary driver for the CLI tooling was a fast and reliable way to compare the state of files between different processing stages. In the town I live, there are about 200 routes, which go through over 2500 different stops. So if we would like to extract all stops from different timetables from different fleets - the data are close to impossible to visually analyse, and the best way to figure out the completeness is to see if specific metrics hold, like TDD but a level statistician.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;not-my-soap-client&quot;&gt;Not my SOAP client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First and foremost, and that might be obvious for some, but not for everybody, SOAP web service is just another HTTP service, but only responding to POST requests, with a precisely designed response body. People usually use dedicated, schema-aware tools like SOAPui, but that not required. Simple curl is good enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;(DATE=2019-03-02; FLEET=18; cat &amp;lt;&amp;lt; EOF) | curl -XPOST -d @- -H &quot;Content-type: text/xml&quot; http://172.30.100.93:8016/WSSchedulesExchange/WS/TimetablesWS.asmx | xmllint --format - &amp;gt; timetable.xml
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&amp;gt;
&amp;lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:x=&quot;http://tempuri.org/&quot;&amp;gt;
  &amp;lt;soap:Header/&amp;gt;
  &amp;lt;soap:Body&amp;gt;
      &amp;lt;x:GetTimetable&amp;gt;
         &amp;lt;x:date&amp;gt;$DATE&amp;lt;/x:date&amp;gt;
         &amp;lt;x:fleet&amp;gt;$FLEET&amp;lt;/x:fleet&amp;gt;
      &amp;lt;/x:GetTimetable&amp;gt;
  &amp;lt;/soap:Body&amp;gt;
&amp;lt;/soap:Envelope&amp;gt;
EOF&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One might ask, why bother? It&amp;#8217;s faster, automation and batching friendly - and let do downstream processing faster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-basics-and-naive-ness&quot;&gt;The basics and naive-ness&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the data is here, &lt;code&gt;grep&lt;/code&gt; is here for some of the most basic processing. As grep / uniq / sort work &lt;em&gt;per line&lt;/em&gt; formatting the actual document makes much sense&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;curl {url} | python -m json.tool | grep &quot;stopId&quot; | sort | uniq | wc -l&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;curl {url} | xmllint --format - | grep &quot;stopId&quot; | sort | uniq | wc -l&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; is a powerful tool, as it also allows you to output more than a single line (&lt;code&gt;grep -A1&lt;/code&gt; or &lt;code&gt;grep -B2&lt;/code&gt;) or use a perl regular expression for row matching (&lt;code&gt;grep -oP &quot;(?&amp;#8656;&amp;lt;StopId&amp;gt;)[^&amp;lt;]+&quot;&lt;/code&gt;). It&amp;#8217;s all fine, until we would like to have a more 'holistic' approach and start missing things like &lt;em&gt;xPath&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-real-xml-processing&quot;&gt;The real XML processing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are all fine as long as nothing extraordinary happens, just filtering lines of XML. What if we would like to get some of the pairs (bus number together with a route)? Like &lt;em&gt;xPath&lt;/em&gt; process the XML file. Then &lt;a href=&quot;http://xmlstar.sourceforge.net/doc/UG/xmlstarlet-ug.html&quot;&gt;XmlStarlet Command Line XML Toolkit&lt;/a&gt; comes into play.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;xmlstarlet sel -N x=&quot;http://tempuri.org/&quot; \
    -T -t -m &quot;//x:Timetable&quot; \
    -n -v &quot;concat('(',x:LineId,'  ', x:RouteId,')')&quot; {file}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With support of namespaces, xPath functions - it quickly become one of my favorite hammers in my toolbox.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;but-xml-is-so-90s-we-do-json-here&quot;&gt;But XML is so 90s - we do JSON here&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, been there as well. One of the final steps was to compare generated JSON files (over to 10MB each) - if the output data hasn&amp;#8217;t changed, more or less a golden hammer technique.
There is a small JSON processor called &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq - lightweight and flexible command-line JSON processor&lt;/a&gt; which can save you hours of meaningless fight with visual editors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JSON files were of following structure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{
    &quot;lastUpdate&quot;: &quot;2019-03-09 13:48:50&quot;,
    &quot;trips&quot;: [
        {},
        {}
    ]
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The goal was to compare the content of the array. Every computer science student knows things are easiest to compare when sorted so to the collection sorted we can use:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;curl | jq '.trips' | jq 'sort_by(.routeId, .tripId)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-happy-ending&quot;&gt;A happy ending&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This whole story is based on a real life example. It was was done as a part of an opendata initiative, opening public transportation data in Gdańsk: &lt;a href=&quot;https://ckan.multimediagdansk.pl/dataset/tristar/&quot; class=&quot;bare&quot;&gt;https://ckan.multimediagdansk.pl/dataset/tristar/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2019/03/09/how-to-train-your-bash/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2019/03/09/how-to-train-your-bash/</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Releasing in trunk based development</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve been looking into &lt;a href=&quot;https://trunkbaseddevelopment.com&quot;&gt;trunk based development&lt;/a&gt; recently. What I do in one of the projects fits the approach nicely (small team, frequent releases, some direct commits or short-lived branches, etc.).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only struggle I have is tagging the releases. We do CI but not every coming goes to production, and we want to increment (change) the version once the code is shipped to the customer&amp;#8217;s environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How in the trunk bases development (in an idiomatic way) should I do a release? How you feel with release commits on master? I can see two approaches (and the fact using Java + Maven bit that&amp;#8217;s just tooling that should come in the way).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Approach #1&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;//version information in trunk: 'SNAPSHOT'&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout -b release/1.11&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;// update version on release branch and commit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;// build the complete project and release&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;// continue with features&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Approach #2&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;// version information in trunk: '1.11-SNAPSHOT'&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git branch release/1.11&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;// update version on the master branch to 1.12-SNAPSHOT'&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git checkout release/1.11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;// update version on release branch to '1.11' and commit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;// build the complete project and release&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;// continue with features&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second approach leaves a single commit in the repository&amp;#8217;s history, which I&amp;#8217;m not sure how to feel about. The latter approach makes the code slightly more traceable and the release process a bit easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Couldn&amp;#8217;t decide so I ended up asking a &lt;a href=&quot;https://stackoverflow.com/questions/54050444/release-version-commit-in-trunk-based-development/&quot;&gt;stackoverflow question&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/54053085&quot;&gt;got an answer pretty quickly&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Instead of creating release branches just to update the versions, &lt;strong&gt;treat every commit as releasable in true CI/CD fashion&lt;/strong&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; danielorn&lt;br&gt;
&lt;cite&gt;https://stackoverflow.com/users/7146596/danielorn&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a fixed version in the source (say 'SNAPSHOT' or master), which is never edited by any developer. On every commit project is built, all tests run, and a releasable package is created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only outstanding issue is the unique, human-readable version numbers. I liked the solution suggested on stackoverfow&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let the CI tool substitute the SNAPSHOT version to something like &lt;code&gt;&amp;lt;git commit date&amp;gt;-&amp;lt;short git commit hash&amp;gt;`&lt;/code&gt;, which has the benefits of&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Being truly unique (thanks to the hash)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being easily interpreted and compared by a human (thanks to the date)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being reproducible (thanks to using git information)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My thoughts were going a similar direction but not as straightforward as the one suggested by Daniel.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve mentioned project is Java + Maven, so no surprise an XML built tool was used for experimentation. It also appears many Maven plugins can support &lt;em&gt;dynamic versioning&lt;/em&gt;  of either a project of an artifact (or both). Plugins like &lt;a href=&quot;https://github.com/jgitver/jgitver-maven-plugin&quot;&gt;jgitver-maven-plugin&lt;/a&gt; or &lt;a href=&quot;https://github.com/git-commit-id/maven-git-commit-id-plugin&quot;&gt;maven-git-commit-id-plugin&lt;/a&gt; can be used. As &lt;em&gt;jgitver&lt;/em&gt; requires running as a core extension, I&amp;#8217;ve used the latter one for implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My current build (snippet) work like this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://maven.apache.org/POM/4.0.0&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;attribute-name&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;attribute-name&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mygroup&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;myproject&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;LATEST&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;tag&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;maven.build.timestamp.format&amp;gt;&lt;/span&gt;
            yyyyMMdd &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/maven.build.timestamp.format&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;tag&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;git_revision_in_finalName&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;activation&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;exists&amp;gt;&lt;/span&gt;.git&lt;span class=&quot;tag&quot;&gt;&amp;lt;/exists&amp;gt;&lt;/span&gt; &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/activation&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;
                    ${project.name}-${maven.build.timestamp}_${git.commit.id.abbrev}
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt; &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;


    &lt;span class=&quot;tag&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;${project.name}-${project.version}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;pl.project13.maven&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;git-commit-id-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;get-the-git-infos&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;tag&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;revision&lt;span class=&quot;tag&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;failOnNoGitDirectory&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/failOnNoGitDirectory&amp;gt;&lt;/span&gt; &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The default project version is &lt;strong&gt;LATEST&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I format the Maven appropriately, to use in the &lt;em&gt;finalName&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When git repository is present use the date and commit id in the file name, otherwise use the default final Name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The resulting name is &lt;strong&gt;myproject-20190105-e82886d.jar&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is no git folder, the plugin execution is skipped.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m happy with this approach. However, I fiddled a bit with a different approach: create a release branch, to keep the release code on a separate branch (to be able to deploy an existing version with hotfixes) and use more semantic versioning &lt;em&gt;(semver)&lt;/em&gt; approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mygroup&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;myproject&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;master&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;tag&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;git_revision_in_finalName&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;activation&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;exists&amp;gt;&lt;/span&gt;.git&lt;span class=&quot;tag&quot;&gt;&amp;lt;/exists&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/activation&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;
                    ${project.name}-${git.branch.release}
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt; &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;


    &lt;span class=&quot;tag&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;${project.name}-${project.version}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;pl.project13.maven&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;git-commit-id-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;get-the-git-infos&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;tag&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;revision&lt;span class=&quot;tag&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;failOnNoGitDirectory&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/failOnNoGitDirectory&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;replacementProperties&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;replacementProperty&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;tag&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;git.branch&lt;span class=&quot;tag&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;tag&quot;&gt;&amp;lt;propertyOutputSuffix&amp;gt;&lt;/span&gt;release&lt;span class=&quot;tag&quot;&gt;&amp;lt;/propertyOutputSuffix&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;tag&quot;&gt;&amp;lt;token&amp;gt;&lt;/span&gt;^([^\/]*)\/([^\/]*)$&lt;span class=&quot;tag&quot;&gt;&amp;lt;/token&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;tag&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;$2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;tag&quot;&gt;&amp;lt;regex&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/regex&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/replacementProperty&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/replacementProperties&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The default project version is &lt;strong&gt;master&lt;/strong&gt; to keep it consistent with git-based naming (no matter if &lt;em&gt;.git&lt;/em&gt; folder is present or not)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The final name is based on the git branch name (either master or release number);  &lt;strong&gt;myproject-1.3.jar&lt;/strong&gt; when built from branch &lt;code&gt;release/1.3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The latter approach works as well and produces a version as expected. However, I consider this much more fragile (more corner cases with different branch names), and I&amp;#8217;ve stuck to the initial approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From now on, all the commits are potentially releasable and which artifact gets released is a subject of preference. Whichever goes to production, is traceable in a human-readable way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2019/01/05/release-in-trunk-based-devel/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2019/01/05/release-in-trunk-based-devel/</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Microservices. I'm new here, where to start?</title>
        <description>&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Recently a friend of mine asked me if I have some useful microservces links and videos - to quickly get started. So here - I made one. A gentle introduction to what&amp;#8217;s the crack about this microservices thing.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are about to start the journey to microsrvices and wonder where is a good point - here is an my opinionated list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start with Sander Hoogendoorn; either a blog post &lt;a href=&quot;http://sanderhoogendoorn.com/blog/index.php/microservices-the-good-the-bad-and-the-ugly/&quot; class=&quot;bare&quot;&gt;http://sanderhoogendoorn.com/blog/index.php/microservices-the-good-the-bad-and-the-ugly/&lt;/a&gt; or a video &lt;a href=&quot;https://www.youtube.com/watch?v=Frz51yJbtKU&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=Frz51yJbtKU&lt;/a&gt;. Sander references many books and/or arcticles, but also covers some basics. The presentation flow is nice - to it&amp;#8217;s a plesant experience to listen to Sander.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a reading person, than Sam Newman&amp;#8217;s book is the classic of microservices writing: &lt;a href=&quot;http://samnewman.io/books/building_microservices/&quot; class=&quot;bare&quot;&gt;http://samnewman.io/books/building_microservices/&lt;/a&gt; (or a Polish translation - &lt;a href=&quot;http://helion.pl/ksiazki/budowanie-mikrouslug-sam-newman,budmik.htm&quot; class=&quot;bare&quot;&gt;http://helion.pl/ksiazki/budowanie-mikrouslug-sam-newman,budmik.htm&lt;/a&gt;). It&amp;#8217;s a nice, gentle introduction. Sam has an elegant style and the book reads like a prose - not a technical gibrish book. However, if you expect concrete code examples with a set of recipes - that&amp;#8217;s not there. It&amp;#8217;s more of a consultancy talk, after which you feel really happy and inspired - not a war time stories with all the possible problems and fuckups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being in the Thoughtworks &quot;radar&quot;, you can&amp;#8217;t miss this article: &lt;a href=&quot;https://martinfowler.com/articles/microservices.html&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/articles/microservices.html&lt;/a&gt; - which pretty much triggered the whole discussion (by Martin Fowler and James Lewis).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you think - the whole microservices thing is for you, you can either start with microservices (&lt;a href=&quot;https://martinfowler.com/articles/dont-start-monolith.html&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/articles/dont-start-monolith.html&lt;/a&gt;) or with monolith (&lt;a href=&quot;https://martinfowler.com/bliki/MonolithFirst.html&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/bliki/MonolithFirst.html&lt;/a&gt;). As you can see - there is always more than one answer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And how to start is not the only problem. When you start getting your head around the basic concepts, when you think you are &quot;groking the framework&quot; - you should start to see some 'non-functional' aspects of microservices architecture. Like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;(to read)&lt;/em&gt; Aspects of switching from what&amp;#8217;s familiar (monoliths) to what&amp;#8217;s new (microservices): &lt;a href=&quot;https://www.oreilly.com/ideas/the-evolution-of-scalable-microservices&quot; class=&quot;bare&quot;&gt;https://www.oreilly.com/ideas/the-evolution-of-scalable-microservices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;(to read)&lt;/em&gt; Non technical traps and gotchas: &lt;a href=&quot;https://medium.com/jan-filipowski-blog/microservices-as-if-you-mean-it-28a88ee58d88&quot; class=&quot;bare&quot;&gt;https://medium.com/jan-filipowski-blog/microservices-as-if-you-mean-it-28a88ee58d88&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;(soon to watch)&lt;/em&gt; How microservices impact maintainability? &lt;a href=&quot;http://cfp.devoxx.pl/2017/talk/HLX-1267/Microservices_-_the_naked_truth_of_the_maintainability&quot; class=&quot;bare&quot;&gt;http://cfp.devoxx.pl/2017/talk/HLX-1267/Microservices_-_the_naked_truth_of_the_maintainability&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(soon to watch)_ Are we ready for microservices (as an organization)? &lt;a href=&quot;http://cfp.devoxx.pl/2017/talk/BTR-7404/Stages_of_maturity_on_the_way_to_microservices&quot; class=&quot;bare&quot;&gt;http://cfp.devoxx.pl/2017/talk/BTR-7404/Stages_of_maturity_on_the_way_to_microservices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you find some other articles are worth mentioning - leave a link in the comments sections and let this list grow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My take on the microservices journey is here: &lt;a href=&quot;http://jakub.marchwicki.pl/consultancy/microservices/&quot; class=&quot;bare&quot;&gt;http://jakub.marchwicki.pl/consultancy/microservices/&lt;/a&gt; - which can be a one, two or three days workshop.&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2017/06/26/microservices-still-a-thing/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2017/06/26/microservices-still-a-thing/</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Asciidoctor based invoices</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is something I&amp;#8217;ve been thinking for a while, but &lt;a href=&quot;https://jezenthomas.com/how-i-write-invoices-in-vim/&quot;&gt;this idea by Jezen&lt;/a&gt; got me going. As Jezen nicely put it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since starting my own company back in April, I’ve had to piece together some fairly mundane business boilerplate, e.g., invoices, at the end of each month.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think people typically use something from Microsoft Office for this, or maybe some online invoicing web application, but I’m quite happy to stay in the land of Vim for these tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Requirements&lt;/div&gt;
&lt;p&gt;Before I even started planning, I needed to figure out some essential information required on an invoice. This differs from county to country so the list is Poland specific (a I assume fairly overcomplicated compared to British or American invoices - well):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist checklist&quot;&gt;
&lt;ul class=&quot;checklist&quot;&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; invoice date&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; consecutive number, based on one or more series which genuinely identifies an invoice&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; names of both seller and customer, with addresses and tax identification numbers (ie. VAT numbers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; date when goods or services were delivered (or date of receiving money when the service was prepaid)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; name of goods or services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; quantity (together with a measure - like a single piece)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; unit price&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; discounts (if applicable or not included in the unit price)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; the overall value of goods or services (without taxes); unit price &lt;em&gt;times&lt;/em&gt; quantity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; VAT tax rate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; the overall net value (all positions), divided by the tax rates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; the overall tax amount (all positions), divided by the tax rates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; the overall-overall (so everything)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whew - pretty complex. However, for the sake of my own invoices, where I always have a single position with a single tax rate - there is a chance I can simplify it a bit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Ingredients&lt;/div&gt;
&lt;p&gt;When done with the &lt;em&gt;requirements&lt;/em&gt; I can finally start doing the fun stuff - playing with Asciidoctor. I&amp;#8217;ve split my work into few steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Asciidoctor template&lt;/strong&gt;: an &lt;code&gt;.adoc&lt;/code&gt; file with the structure of the document &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Styling&lt;/strong&gt;: I only needed a PDF, so Asciidoctor PDF theming guide &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Source files&lt;/strong&gt;: easy consumable, human readable files with invoice details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Runner&lt;/strong&gt;: a groovy script to glue it all together and run the thing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Source files&lt;/div&gt;
&lt;p&gt;I&amp;#8217;ve started with a draft of source file, which was YAML in my case. With a structure more or less like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;key&quot;&gt;invoice-number&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;FV/0001/2017&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;paid&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;2017-01-31&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;due-date&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;2017-02-06&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;client&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
  My Precious customer
  TAX nb: 123456789&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;positions&lt;/span&gt;:
  - &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;element: Writing lot of code&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;key&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;key&quot;&gt;unit-price&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;100&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;key&quot;&gt;tax&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;23%&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;notes&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is obviously not enough for an invoice to be complete (especially under polish law regulations). So I needed some additional logic to calculate sums, amounts, parse dates etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Groovy runner&lt;/div&gt;
&lt;p&gt;I went with Groovy. Under no means I&amp;#8217;m a Groovy expert, but there were a few quick wins with Groovy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;frictionless dependency management (with &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/grape.html&quot;&gt;grapes&lt;/a&gt;),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;integration with Asciidoctor (through asciidoctorj),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ability to run everything in the command line through a single file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Asciidoctor is Ruby based and Rake might have seemed natural - I&amp;#8217;m even worse at  Ruby.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The script has grown up to 150 lines of code; more that I&amp;#8217;ve expected - but that&amp;#8217;s mostly because I&amp;#8217;m not very proficient with Groovy syntactic sugar. That&amp;#8217;s also the reason why I&amp;#8217;m not sharing the script - I need to work on that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Calling Asciidoctor from Groovy is actually dead simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;Invoice invoiceData = Invoice.fromFile(inputFile) &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; attributes = attributes()
        .attribute(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pdf-stylesdir&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;template/themes&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
        .attribute(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pdf-style&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;basic.yml&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)  &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
        .attribute(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nofooter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
        .attributes(invoiceData.asMap)
        .asMap()

Asciidoctor asciidoctor = create()
asciidoctor.convertFile(
        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;template/template.adoc&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;), &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
        options()
          .attributes(attributes)
          .toFile(Paths.get(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, outputFile).toFile())
          .backend(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
          .get())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This is where I load YAML into a map-like structure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slight enhancements to the basic asciidoctor-pdf theme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoking actual conversion based on my template file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rest of the script was validating the input and some (most) of additional logic related to calculating different values required on the invoice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Asciidoctor template&lt;/div&gt;
&lt;p&gt;Initially the template sounded fairly simple, though there is a number of Asciidoctor and asciidotor-pdf design decisions (or limitations) which needed workarounds. These included more complex attributes types (like lists / maps) or elements positioning in PDF (align to right).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, some parts of the template looked a weird, like this one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Mitigating lack of loop-control&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;txt&quot;&gt;ifdef::position-0-element[]
| {position-0-element}
| {position-0-quantity} szt
| {position-0-unit-price}
| {position-0-position-total}
| {position-0-position-tax}
| {position-0-position-total-gross}
| {position-0-tax}
endif::[]

ifdef::position-1-element[]
| {position-1-element}
| {position-1-quantity} szt
| {position-1-unit-price}
| {position-1-position-total}
| {position-1-position-tax}
| {position-1-position-total-gross}
| {position-1-tax}
endif::[]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wrote it already: most of my invoiced have a single position and a single tax rate, which makes my life a bit easier and I didn&amp;#8217;t need to make the template too generic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There were also few issues with including subsections, defining attributes within a template etc. Asciidoctor-pdf is still in &lt;em&gt;alpha&lt;/em&gt; phase and I can imagine I&amp;#8217;ve stretched it a bit to its limits. I&amp;#8217;ve promised myself to document it with example and see how it should really work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Theming&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s actually one of the most awesome parts of asciidoctor-pdf: a YAML file which defines a number of attributes impacting the look and feel of the PDF. Changing fonts, sizes, colors as easy as 1-2-3 and neatly detailed in the theming guide &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnote_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That was a huge win!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;so-why-i-ve-done-it&quot;&gt;So why I&amp;#8217;ve done it?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I could&amp;#8217;ve used one of millions invoicing software (offered even for free, in the cloud). True.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But I didn&amp;#8217;t. I had a funny and geeky evening exploring the ecosystem of Asciidoctor. It was definitely worth it! And must admit, I like the final results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/2017-01-28-asciidoctor-based-invoices-8a844.png&quot; alt=&quot;2017 01 28 asciidoctor based invoices 8a844&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. &lt;a href=&quot;http://asciidoctor.org/docs/user-manual/&quot; class=&quot;bare&quot;&gt;http://asciidoctor.org/docs/user-manual/&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. &lt;a href=&quot;https://github.com/asciidoctor/asciidoctor-pdf/&quot; class=&quot;bare&quot;&gt;https://github.com/asciidoctor/asciidoctor-pdf/&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt;. &lt;a href=&quot;https://github.com/asciidoctor/asciidoctor-pdf/blob/master/docs/theming-guide.adoc&quot; class=&quot;bare&quot;&gt;https://github.com/asciidoctor/asciidoctor-pdf/blob/master/docs/theming-guide.adoc&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2017/01/28/asciidoctor-based-invoices/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2017/01/28/asciidoctor-based-invoices/</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>GeeCON Reactive 2016 - part II - agenda</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the previous post I&amp;#8217;ve described the &lt;em&gt;&quot;GeeCON Buzzwords&quot;&lt;/em&gt; approach - have a look if you&amp;#8217;ve missed it: &lt;a href=&quot;/posts/2016/07/04/reactive-geecon/&quot;&gt;GeeCON Reactive 2016 - in Sopot this September&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, it&amp;#8217;s high time to do a deeper dive into the agenda.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reactive-streams&quot;&gt;Reactive Streams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are starting with the Reactive Streams (the manifesto, TCK etc). I&amp;#8217;ve described it in the previous writeup; the Reactive Streams intention is to provide a standard for asynchronous stream processing with non-blocking back pressure. We decided to drill down multiple aspects of that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;describe what&amp;#8217;s all about in plain English&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cover the TCK, the technology compatibility kit, which offers a set of tests to validate implementation against Reactive Streams rules. This is effectively a place where all the edge cases and shaded corners are covered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;show a bigger picture how &lt;em&gt;going reactive&lt;/em&gt; can impact the application architecture&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;is-it-only-for-new-stuff&quot;&gt;Is it only for new stuff?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might have though &lt;em&gt;this reactive thing is only for new, green field, development&lt;/em&gt;. That&amp;#8217;s not true and we (obviously) have an answer to that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One thing to cover would be reactive extensions (Rx), which is not Reactive Streams per se (not until the version 2.0), but it&amp;#8217;s an important library in the reactive family.
We have an honor to host &lt;a href=&quot;https://twitter.com/tnurkiewicz&quot;&gt;Tomek Nurkiewicz&lt;/a&gt;, who will cover RxJava in the way he does it in most of his presentations: a single title slide and live coding.
Tomek is currently writing a book about RxJava for O&amp;#8217;Reilly - which is a great recommendation itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Besides RxJava, reactive is coming to one of the most popular frameworks in the JVM world - Spring Framework.
Spring 5.0 (which first milestone has just been release - as of writing these words) will be inherently reactive, based on Pivotal&amp;#8217;s implementation of Reactive Streams: Project Reactor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To bring some more light how things might work inside a reactive engine and what are the implications for the application developers - we&amp;#8217;ve asked &lt;a href=&quot;https://twitter.com/smaldini&quot;&gt;Stephane Maldini&lt;/a&gt; - project lead of the Project Reactor - to share some expertise with you.
Probably there is no better person to give you first hand information what can be expected in Spring ecosystem. Probably must watch if you are working currently with Spring Framework.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;beyond-the-server-side&quot;&gt;Beyond the server side&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reactive disrupts the server side - but it&amp;#8217;s not only server side programming that needs changing.
It&amp;#8217;s obviously important for the backend to be able to handle enormous throughput of data, but also other parts of the system (storage, frontend) needs adequate adapting.
We are covering this as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First and foremost, we will looking into web frontends. &quot;Functional reactive web&quot; - which is a promise given by Elm.
A language designed around a concept of pure transformations of data that operate on messages coming in and modifications to the HTML going out.
This will be brought to you by &lt;a href=&quot;https://twitter.com/samirtalwar&quot;&gt;Samir Talwar&lt;/a&gt;.
We didn&amp;#8217;t want to go JavaScript (again) nor take general purpose language which has a JS runtime (Scala, Kotlin etc).
We wanted something that was built with a web in mind.
Elm seemed to fulfill this definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Frontend, however, doesn&amp;#8217;t mean only web.
It can be a mobile application as well.
That&amp;#8217;s why we are bringing practitioners from &lt;a href=&quot;https://twitter.com/codewisecom&quot;&gt;codewise&lt;/a&gt; with examples and use cases of implementing 100k transaction per second, with extensive usage of RxJava (on the server side) and reactive mobile applications (for consumers' frontends).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-closing-keynote-haven-t-we-seen-all-that&quot;&gt;The closing keynote: haven&amp;#8217;t we seen all that?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last year we&amp;#8217;ve given you a closing with a twist. &lt;a href=&quot;https://twitter.com/erikdoe&quot;&gt;Erik Dörnenburg&lt;/a&gt; gave a great keynote, letting us ponder a bit what&amp;#8217;s the role of an architect, especially in the microservice world.
World of small teams, collaboration, empowerment and completely different decision making processes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year, we asked &lt;a href=&quot;https://twitter.com/javaperftuning&quot;&gt;Kirk Pepperdine&lt;/a&gt; to give us some final thoughts.
When I first met him few conferences ago I was impressed by his experience.
When I attended his Smalltalk quickie (GeeCON 2016) I though - Wooow! This guy saw nearly everything ;)
When we&amp;#8217;ve spoken later about the idea behind GeeCON Reactive, about the current state of industry, buzzword, containers, all that stuff - it occured to me Kirk has done it all in mid-nineties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously, back in nineties, reactive wasn&amp;#8217;t standardized, it was proprietary.
Still - very powerful and incredibly efficient.
We don&amp;#8217;t want to reinvent the wheel, we believe best is achieved when we stand on the shoulders of giants.
That&amp;#8217;s why we asked Kirk to share his past experience, tell some good stories, show things to learn from - to avoid repeating same mistakes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can expect it in his closing keynote: &quot;MicroServices - Old Fish, New Fish&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, don&amp;#8217;t think twice, just go and &lt;a href=&quot;http://2016.reactive.geecon.org/register/&quot;&gt;register&lt;/a&gt; - with the early birds price (until 11th of August).
And finally grok the concept of reactive programming!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2016/08/01/reactive-geecon-part-ii/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2016/08/01/reactive-geecon-part-ii/</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>GeeCON Reactive 2016 - in Sopot this September</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has been official since the big GeeCON in May in Kraków: we are doing another GeeCON event in Sopot. AGAIN!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Update 2016-08-01&lt;/strong&gt;. This is the first part of a two part series. Read the agenda follow up part: &lt;a href=&quot;/posts/2016/08/01/reactive-geecon-part-ii/&quot;&gt;GeeCON Reactive 2016 - part II - Agenda&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p&gt;So it's official, there is no way back. &lt;a href=&quot;https://twitter.com/hashtag/geecon?src=hash&quot;&gt;#geecon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/reactive?src=hash&quot;&gt;#reactive&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/sopot?src=hash&quot;&gt;#sopot&lt;/a&gt; will take place on 9th of September 2016&lt;/p&gt;— jakub marchwicki (@kubem) &lt;a href=&quot;https://twitter.com/kubem/status/731127144265453568&quot;&gt;May 13, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last year, the GeeCON Microservices went good, we enjoyed it, we&amp;#8217;ve got a positive feedback. So this year we decided to challenge ourselves again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously, not about microservices - it&amp;#8217;s not hip enough anymore. We decided to pivot GeeCON Sopot towards a &lt;code&gt;Buzzword Driven Conference&lt;/code&gt;: take yet another industry buzzword and distill it into its tiniest detail. Possibly - a different buzzword every year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what&amp;#8217;s this year about? You guessed right - this year&amp;#8217;s theme is &lt;strong&gt;reactive&lt;/strong&gt; and we are bringing the &lt;a href=&quot;http://2016.reactive.geecon.org&quot;&gt;GeeCON Reactive&lt;/a&gt; to the GeeCON family.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-single-track&quot;&gt;A single track&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://2016.reactive.geecon.org/&quot;&gt;GeeCON Reactive&lt;/a&gt; is a single day, single track conference. &lt;a href=&quot;/posts/2015/08/05/microservice-geecon/#a-single-track&quot;&gt;As it was last year&lt;/a&gt;, for exactly the same reasons: our ambition wasn&amp;#8217;t to bring you largest number of speakers, enormous amount of tracks. The rationale was different: focus on a single topic and cover it from multiple perspectives.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;no-call-for-papers&quot;&gt;No call for papers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We know this is a controversial topic. It was also a hard decision for us - not to give a shout out to the community. We did the job of curating the agenda and bringing most valuable speakers we could think of.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like last year we want to look at reactive from different angels, to show the impact of the whole reactive concept on our industry, on how we are (or will be) building our applications / systems / solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;location&quot;&gt;Location&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have &quot;if it works don&amp;#8217;t fix it&quot; mantra deep in our hearts, hence  &lt;a href=&quot;http://2016.reactive.geecon.org/&quot;&gt;GeeCON Reactive&lt;/a&gt; will remain the only conference (at least in Poland) with only 200 meters (measured) between you and the sandy beach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last year people had lunch at the beach, a refreshing brief of sea air between the sessions. Expect exactly the same this year - weather is pre-booked as well ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Venue stays the same: &lt;a href=&quot;http://2016.reactive.geecon.org/practical/&quot;&gt;The Multikino Sopot&lt;/a&gt; is a small and enjoyable cinema. We value quality over quantity - a cozy venue, great talks, quality food. That&amp;#8217;s our definition of work / relax balance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sessions&quot;&gt;Sessions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last, but not least: sessions. We will not reveal everything - just give you a feeling what to expect with the first three sessions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are starting with &lt;a href=&quot;twitter.com/graham_jp&quot;&gt;Jonathan Graham&lt;/a&gt; and his very gentle introduction to reactive systems. If you&amp;#8217;ve never given yourself time to understand what reactive is about - this is a session for you. If you do understand it but struggle with describing it to your grandma - this session is also for you. In other word: reactive 101.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is to be followed by &lt;a href=&quot;https://twitter.com/ktosopl&quot;&gt;Konrad Malawski&lt;/a&gt; session, drilling down the Reactive Streams. There is no better person to do it than the author of Reactive Streams TCK and Akka core team member. Expect a deep technical insight.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To close of the first batch, we invited &lt;a href=&quot;https://twitter.com/robertharrop&quot;&gt;Rob Harrop&lt;/a&gt;, CTO of Skipjaq and a co-founder of SpringSource (in his past-life). In his Going Reactive talk he will show what it means for applications to become reactive, not only on the code level but beyond; identify patterns, decouple components and more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;more-to-come&quot;&gt;More to come&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From now on, every other week we will be revealing more &lt;a href=&quot;http://2016.reactive.geecon.org/&quot;&gt;GeeCON Reactive&lt;/a&gt; sessions - some goodies are still to come.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see from this first teaser - we are taking the concept pretty seriously. This is only the first batch and some more speakers are already &quot;revealed&quot; on the &lt;a href=&quot;http://2016.reactive.geecon.org/&quot;&gt;website&lt;/a&gt;. Talks and titles are still to come so stay tuned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2016/07/04/reactive-geecon/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2016/07/04/reactive-geecon/</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>TypeScript: Setting up an IDE and working environment - part II</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve been trying the &lt;a href=&quot;http://atom.io&quot;&gt;Atom Editor&lt;/a&gt; multiple times, trying to switch from Sublime (my default text editing environment). I always found it not mature enough. I&amp;#8217;ve recently given it another try - this time successfully. So it&amp;#8217;s time for the plugin setup of my TypeScript IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;it-s-all-about-plugins&quot;&gt;It&amp;#8217;s all about plugins&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some things haven&amp;#8217;t changes: still there is not need for &lt;code&gt;npm install -g typescript&lt;/code&gt; - we can keep everything inside the editor. The full TypeScript support comes with multiple plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;a href=&quot;https://atom.io/packages/atom-typescript&quot;&gt;atom-typescript&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;It&amp;#8217;s advertised as &lt;code&gt;The only TypeScript plugin you will ever need&lt;/code&gt; and it&amp;#8217;s quite so. It handles auto completion, compilation on save - good starting point for us to be productive.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;a href=&quot;https://atom.io/packages/linter-tslint&quot;&gt;linter-tslint&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;It&amp;#8217;s optional, but provides a good hint for consistency in your TypeScript files. Things like semicolons, are optional - but it&amp;#8217;s good to either have them or not. Lint will take care of those.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;a href=&quot;https://atom.io/packages/script&quot;&gt;script&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Just to &lt;em&gt;&quot;Run code in Atom&quot;&lt;/em&gt;; when it comes to some code snippets it&amp;#8217;s worth to be able to evaluate if straight away in console (especially when you just hack around in the learning process). &lt;em&gt;Script&lt;/em&gt; package gives you a helping hand here.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s about it. I know this it not a production environment, shipping IDE created &lt;code&gt;js&lt;/code&gt; files is like shipping a &lt;code&gt;jar&lt;/code&gt; file created through &lt;code&gt;File &amp;gt; Export&lt;/code&gt; in Eclipse. Nonetheless, it&amp;#8217;s enough to start getting better with language. Other tools will come with time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 02 Jul 2016 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2016/07/02/typescript-setting-up-ide-part-2/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2016/07/02/typescript-setting-up-ide-part-2/</guid>
        
        <category>typescript</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>TypeScript: Setting up an IDE and working environment</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This episode is pretty straight forward: configuring the workspace. My IDE choice is either Sublime Text or IntelliJ IDEA and I&amp;#8217;m focusing on these two. Additionally, I&amp;#8217;ve setup the working environment, auto reloading the browser (as the ultimate runtime environment of my JavaScript experimentations).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TypeScript can be installed through the NPM package manager &lt;code&gt;npm install -g typescript&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wait. What? What is &lt;code&gt;npm&lt;/code&gt;. So here we go; welcome to the world of JavaScript package managers. &lt;code&gt;npm&lt;/code&gt; stands for package manager for node.js (one among many). I won&amp;#8217;t be drilling &lt;em&gt;node&lt;/em&gt; installation details - not worth it. I&amp;#8217;ll just point out one thing which saved my live millions of times: always use version managers. It&amp;#8217;s a great practice from PHP Pear times, where everything was global, thus changing a library version for a single project was close to impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can bound not only libraries but whole runtimes (compilers) and avoid any interference between runtimes. Things like &lt;a href=&quot;http://rvm.io&quot;&gt;rvm.io&lt;/a&gt;, &lt;a href=&quot;https://github.com/brainsik/virtualenv-burrito&quot;&gt;Virtualenv&lt;/a&gt;, &lt;a href=&quot;https://github.com/cweiske/phpfarm&quot;&gt;phpfarm&lt;/a&gt; saved tons of developers' hours. Same story applies to the node world and I suggest not going forward without installing one of many version managers. I went with &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt;. If you ask why - probably it had highest number of Github stars ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which &lt;em&gt;node&lt;/em&gt; and &lt;em&gt;npm&lt;/em&gt; on board, typescript installation is a piece of cake. Having successfully done that I could&amp;#8217;ve moved forward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sublime-text&quot;&gt;Sublime Text&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Sublime, Microsoft helps with an &lt;a href=&quot;https://github.com/Microsoft/TypeScript-Sublime-Plugin&quot;&gt;official plugin&lt;/a&gt;. If the &lt;em&gt;node&lt;/em&gt; is already installed and enabled - installation is easy and out of the box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The editor comes with syntax highlighting and preconfigured compilation (upon request). In general - enough to move forward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intellij-idea&quot;&gt;IntelliJ IDEA&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is well documented TypeScript support for IntelliJ IDEA, which can be installed from the &lt;a href=&quot;https://www.jetbrains.com/idea/help/typescript-support.html&quot;&gt;JetBrains plugin repository&lt;/a&gt;. Obviously it required &lt;em&gt;node&lt;/em&gt; to be installed and enabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve installed the plugin, but I&amp;#8217;ve disabled the compiler (the checkbox 'Enable TypeScript Compiler'). As described in &lt;a href=&quot;/posts/2016/01/31/typescript-getting-started/&quot;&gt;in the previous part&lt;/a&gt; I &quot;embedded the transpiler&quot; into the browser and evaluated the &lt;code&gt;&amp;#42;.ts&lt;/code&gt; files directly. How the plugin worked for me was syntax colouring and hints. Additionally I could have made my IDE generate JavaScript files together with the sourcemaps (for both IDEA as well as Sublime Text), but I felt it a bit unnatural, too tightly coupled to the IDE. That was something to avoid, to be solved by the build scripts directly on my CI server. Later on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;live-reload&quot;&gt;Live reload&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Final piece of the puzzle was to save hassle of hideous pressing &lt;kbd&gt;F5&lt;/kbd&gt; or &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;R&lt;/kbd&gt;&lt;/span&gt; for refresh. There&amp;#8217;s where Livereload kicks in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
LiveReload monitors changes in the file system. As soon as you save a file, it is preprocessed as needed, and the browser is refreshed.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; http://livereload.com/
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Livereload&lt;/em&gt; &quot;ships&quot; in two pieces: browser (page) extension, that triggers a page reload and a file system watcher - to notify changes in the HTML, CSS, image files (like whatever file extension is configured) - that something needs to be reloaded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The browser part can be handled by a &lt;a href=&quot;http://livereload.com/extensions/&quot;&gt;plugin or browser extension&lt;/a&gt; or a snippet embedded to the page. The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; is required for Safari users, due to Safari API limitations; extensions cannot for with &lt;em&gt;file://&lt;/em&gt; URL. The snippet allows localhost communication, but livereload works also for mobile (on device) browsers (simulators) - with a specific IP address provided inline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;document.write(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;lt;script src=&amp;quot;http://&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + (location.host || &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).split(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;:35729/livereload.js?snipver=1&amp;quot;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Livereload is an open protocol so the &quot;server&quot; side comes in many different flavours, for the developers' convenience. For me, as a JVM-mostly developer, some Java based build tools were the first choice. But there is no need to limit oneself to only &lt;a href=&quot;https://github.com/aalmiray/livereload-gradle-plugin&quot;&gt;Gradle livereload plugin&lt;/a&gt; or &lt;a href=&quot;https://github.com/davidB/livereload-jvm&quot;&gt;Maven&lt;/a&gt;. Livereload works perfectly with node, python, ruby (rake) etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The simplest gradle configuration&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;buildscript {
    dependencies {
        classpath &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.kordamp.gradle:livereload-gradle-plugin:0.2.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
}

apply &lt;span class=&quot;key&quot;&gt;plugin&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.kordamp.gradle.livereload&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

liveReload {
        docRoot &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;app/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This is the folder where the reloadable content sits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This however brings some limitations. As I use vanilla TypeScript and do an in-browser transpilation - that involves additional AJAX calls by the &lt;code&gt;transpiler.js&lt;/code&gt; script. When the protocol is set to &lt;em&gt;file://&lt;/em&gt; some browsers forbid it for security reasons (like Chrome) some don&amp;#8217;t really care (hello Firefox).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For browsers like Chrome we need to expose our content as a basic HTTP server. For me, the simplest HTTP static server &lt;a href=&quot;/posts/2016/01/31/typescript-getting-started/&quot;&gt;from the previous part&lt;/a&gt; (&lt;code&gt;php -S localhost:8080 -t {docRoot}&lt;/code&gt;) did the trick. I know I could have taken some basic HTTP server from node world (like express) and wrap everything in typical JavaScript stack. That will work as well, but my intention so far is to minimize elements not natural (unknown and unfamiliar) for a typical JVM developer. I&amp;#8217;ll get to the &lt;code&gt;nodemon&lt;/code&gt; later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This set-up has taken me few steps forward in both understanding how the JS oriented environment might work as well as with grasping the JavaScript goodies on their own. Hope this will work for you as well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2016/02/02/typescript-setting-up-ide/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2016/02/02/typescript-setting-up-ide/</guid>
        
        <category>typescript</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>TypeScript: Getting started</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So TypeScript&amp;#8230;&amp;#8203; Matters got serious and I decided to further explore the idea of polyglot programming - embracing the frontend development. There is a lot of happening in the backend in the JVM world, but there is as much happening in the browser. I know most of 'backend people' just laugh at the speed new JavaScript frameworks appear (and disappear) but I wanted to tackle the matter seriously.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;betting-on-typescript&quot;&gt;Betting on TypeScript&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I decided to bet on TypeScript. I did an initial research and with mostly static type / compiled languages background I was a bit reluctant to pure JavaScript. Additionally to TypeScript, ScalaJS was also in the loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My primary source of knowledge were presentations, two of them I greatly recommend: &lt;a href=&quot;https://twitter.com/Sander_Mak&quot;&gt;Sander Mak&amp;#8217;s&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=h7NLi2w8ytg&quot;&gt;TypeScript - coding JavaScript without the pain&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/li_haoyi&quot;&gt;Li Haoyi&amp;#8217;s&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=9SalPdAEI28&quot;&gt;Hands-on Scala.js&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, I went with TypeScript, I think for the following reasons (nicely outlined in Sander&amp;#8217;s presentation):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scalable HTML5 client-side development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modular development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easily learnable for Java developers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-invasive (existing libs, browser support)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Long-term vision&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean JS output (exit strategy)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t want to argue that these are not ScalaJS attributes as well, but with my very limited experience with Scala - I went with the first choice. Hello Microsoft ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both TypeScript and ScalaJS have impressive online guides and official documentations. TypeScript &lt;a href=&quot;http://www.typescriptlang.org/Tutorial&quot;&gt;tutorial&lt;/a&gt; and &lt;a href=&quot;http://www.typescriptlang.org/Playground&quot;&gt;playground&lt;/a&gt; are awesome. And so is Li Haoyi&amp;#8217;s &lt;a href=&quot;http://lihaoyi.github.io/hands-on-scala-js/&quot;&gt;Hands on ScalaJS&lt;/a&gt; and &lt;a href=&quot;http://www.scala-js-fiddle.com/&quot;&gt;Scala-Js-Fiddle&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nonetheless, the turning point for me was looking up transpiled JavaScript output for both TypeScript and ScalaJS. Here it is, a small program to count the variable &lt;code&gt;x&lt;/code&gt; from 0, incrementing by 3 (so 3, 9, and 12) before finally printing it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;scalajs&quot;&gt;ScalaJS&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Scala&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;scala&quot;&gt;object ScalaJSExample extends js.JSApp {

  def main() = {
    var x = 0
    while(x &amp;lt; 10) {
      println(x)
      x += 3
    }
    println(s&amp;quot;Final: $x&amp;quot;)

  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;JavaScript&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;ScalaJS.c.&lt;span class=&quot;predefined&quot;&gt;LMain$&lt;/span&gt;.prototype.main__V = (&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() {
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((x &amp;lt; &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;)) {
      ScalaJS.m.&lt;span class=&quot;predefined&quot;&gt;s_Predef$&lt;/span&gt;()
           .println__O__V(x)
    x = ((x + &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;) | &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;)
  };
  ScalaJS.m.&lt;span class=&quot;predefined&quot;&gt;s_Predef$&lt;/span&gt;()
           .println__O__V(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Final: &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + x)
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;typescript&quot;&gt;TypeScript&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TypeScript&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;typescript&quot;&gt;class Main {
    hello() {
        var x = 0;
        while (x &amp;lt; 10) {
            console.log(x)
            x += 3
        }

        console.log(`Final: ${x}`)
    }
}

var main = new Main()
main.hello()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;JavaScript&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Main = (&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; () {
    &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;Main&lt;/span&gt;() {
    }
    Main.prototype.&lt;span class=&quot;function&quot;&gt;hello&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; () {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (x &amp;lt; &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;) {
            console.log(x);
            x += &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;;
        }
        console.log(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Final: &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + x);
    };
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Main;
})();

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; main = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Main();
main.hello();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As TypeScript is a typed superset for JavaScript that compiles into plain JavaScript - the transpiled output has more in common with classic JavaScript. That itself was quite appealing to me (after all - that limits the number of level of abstractions I have no idea about).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-to-start&quot;&gt;Where to start&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve started with few example projects, which were easy to build and run out-of-the-box. After tuning them (breaking them) here and there - it was high time to start something from scratch. This is where the learning curve gets steeper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the first place, I wanted to avoid all the JavaScript cargo cult: &lt;em&gt;node&lt;/em&gt;, &lt;em&gt;npm&lt;/em&gt;, &lt;em&gt;bower&lt;/em&gt;, &lt;em&gt;grunt&lt;/em&gt;, &lt;em&gt;gulp&lt;/em&gt; - whichever. I&amp;#8217;m not that proficient with the JavaScript stack, with the build tools and I found them a bit intrusive: standing between me and my first 'Hello World of TypeScript!' in the browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happily, TypeScript itself comes to the rescue; as the TypeScript compiler is in TypeScript and TypeScript transpiles to JavaScript, why can&amp;#8217;t I run it in browser without external dependencies (and compile everything in the browser)? Weird idea and I know this comes with a price of performance degradation - but that isn&amp;#8217;t my problem at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve started with including TypeScript directly in the webpage&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https://rawgit.com/Microsoft/TypeScript/master/lib/typescriptServices.js&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https://rawgit.com/basarat/typescript-script/master/transpiler.js&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Github &lt;a href=&quot;https://github.com/basarat/typescript-script&quot;&gt;typescript-script project by Basarat Ali Syed&lt;/a&gt;, based on another Github &lt;a href=&quot;https://github.com/niutech/typescript-compile/&quot;&gt;transcript-compile project&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That way I could start to play with my own scripts (not only) locally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;html&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;text/typescript&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;inline&quot;&gt;            module Sayings {
                &lt;span class=&quot;reserved&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;reserved&quot;&gt;class&lt;/span&gt; Greeter {
                    &lt;span class=&quot;key&quot;&gt;greeting&lt;/span&gt;: string;
                    constructor (message: string) {
                        &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.greeting = message;
                    }
                    greet() {
                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Hello, &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.greeting;
                    }
                }
            }&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- You can add multiple TypeScript blocks: --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;text/typescript&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;inline&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; greeter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Sayings.Greeter(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; button = document.createElement(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
            button.innerHTML = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Say hello&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
            button.&lt;span class=&quot;function&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() {
                    alert(greeter.greet())
            }
            document.body.appendChild(button)&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https://rawgit.com/Microsoft/TypeScript/master/lib/typescriptServices.js&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https://rawgit.com/basarat/typescript-script/master/transpiler.js&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a complete example which can be easily opened through &lt;code&gt;index.html&lt;/code&gt; page directly in the browser (through &lt;code&gt;file://&lt;/code&gt; protocol) or though simplest possible http server &lt;code&gt;php -S localhost:8080 -t {folder}&lt;/code&gt;. No additional build scripts involved - simple and clean. Non-inline scripts &lt;code&gt;&amp;lt;script type=&quot;text/typescript&quot; src=&quot;file.ts&quot;&amp;gt;&lt;/code&gt; obviously works as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is just a prototype, I&amp;#8217;ll get to the build tools at some point - that&amp;#8217;s definitely not a production set-up. Nonetheless, it&amp;#8217;s enough to start fiddling further.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What should be coming next?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Livereload of any type - to avoid constant refresh on the browser&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proper build setup - to compile (transpile) TypeScript to JS and serve it to the browser&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDE support (for both IntelliJ and Sublime)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you like it - stay with me for next steps of my TypeScript exploration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2016/01/31/typescript-getting-started/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2016/01/31/typescript-getting-started/</guid>
        
        <category>typescript</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Get your XSD documentation as a part of build process</title>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve started this as a &lt;a href=&quot;http://stackoverflow.com/questions/32106133/xsd-documentation-as-a-part-of-build-process&quot;&gt;stackoverflow question&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve got multiple XSD files describing a schema. I&amp;#8217;d like to generate a human readable documentation as a result of a build process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The XSD is maintained and review within repository (gitflow) and committing the documentation makes the repository cluttered. I&amp;#8217;d like to generate human readable HTML during the build process (maven / gradle / ant build or simple CLI interface)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Found this post How to convert XSD to human readable documentation? and DocFlex/XML Maven plugin seems interesting but I can&amp;#8217;t believe that&amp;#8217;s the only one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any helpful tips on that?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This pretty much outlines the idea: treat XSD as code, get that into repository and have all the subsidiary artifacts elements generated as a part of the build process (not to have autogenerated HTML files in the repository).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can be pretty easy achievable with OxygenXML Editor&amp;#8217;s &lt;em&gt;schemaDocumentation.sh&lt;/em&gt; script, however it requires OxygenXML installed on your build environment, which is something I&amp;#8217;d tend to avoid (I generally avoid having build dependent on the environment beyond just JVM; if build needs something I want it to download it for itself).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was using OxygenXML Editor on my desktop and I like the documentation is generated (the HTML). I also liked a flow that the document is reviewed through the visual part (html) but the comments and remarks are done in the source (code) in a typical code review process. I started to look for tools that could supported this kind of workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OxygenXML Editor &lt;em&gt;schemaDocumentation.sh&lt;/em&gt; script to certain extent could support this flow, but some additional changes were needed to the bash scripts. So I started to look in some different places.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docflex&quot;&gt;DocFlex&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.filigris.com/docflex-xml/maven.php&quot;&gt;DocFlex/XML Maven Integration&lt;/a&gt; looks pretty promising. Installation went smoothly getting some output generated was pretty straightforward - as presented in &lt;a href=&quot;http://www.filigris.com/docflex-xml/maven.php#plugin.example1&quot;&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, only after some more detailed reading I realized that images are only supported through integration with 3rd party tools like XMLSpy or OxygenXML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If all you need is just HTML view (pretty comprehensive after all - but without images) DocFlex is probably enough. It&amp;#8217;s not very expensive (200$ for license) - but to be honest I haven&amp;#8217;t been looking for any free alternatives. Lack of pictures was a deal breaker for me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;oxygen-wrapped-in-gradle-sauce&quot;&gt;Oxygen wrapped in Gradle sauce&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Getting back to the OxygenXML, it&amp;#8217;s a program written in Java and the &lt;em&gt;schemaDocumentation.sh&lt;/em&gt; script is actually invoking a headless application with some command line arguments. If so, I can invoke it directly from a build script. I used Gradle for that&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;apply &lt;span class=&quot;key&quot;&gt;plugin&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

version = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1.0-SNAPSHOT&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

ext {
  generatedDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(buildDir, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;generated-html&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
}

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; OXYGEN_HOME = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/opt/java/oxygen&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;        &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; schemaFiles = [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]        &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;

schemaFiles.each { pageName -&amp;gt;
  task &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;pageName&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SchemaTask&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;key&quot;&gt;type&lt;/span&gt;: JavaExec) {
    mkdir generatedDir

    classpath = files([
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/classes&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/oxygen.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/oxygenDeveloper.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/fop.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/xmlgraphics-commons-1.5.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/batik-all-1.7.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/xercesImpl.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/xml-apis.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/org.eclipse.wst.xml.xpath2.processor_1.2.0.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/icu4j.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/saxon.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/saxon9ee.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/log4j.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/resolver.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/oxygen-emf.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/commons-httpclient-3.1.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/commons-codec-1.3.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/commons-logging-1.0.4.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/httpcore-4.3.2.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/httpclient-cache-4.3.5.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/httpclient-4.3.5.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/fluent-hc-4.3.5.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/httpmime-4.3.5.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/commons-logging-1.1.3.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/commons-codec-1.6.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    ].toList())

    main = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ro.sync.xsd.documentation.XSDSchemaDocumentationGenerator&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    jvmArgs = [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-Djava.awt.headless=true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
    args = [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;schema/&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;pageName&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.xsd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
            &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-format:html&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
            &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-split:location&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
            &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-out:&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;generatedDir&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;pageName&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.html&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
  }
}

task schema(&lt;span class=&quot;key&quot;&gt;dependsOn&lt;/span&gt;: tasks.matching { Task task -&amp;gt;
        task.name.endsWith(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SchemaTask&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)}) {
}

defaultTasks &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;External path to OxygenXML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTML is generated for every file defined in this list&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far Gradle looks like an overkill but this is still work in progress. With the power of Gradle we can try to get rid of all external dependencies and make this build self-sufficient.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;oxygenxml-based-schema-documentator&quot;&gt;OxygenXML based schema documentator&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full Oxygen package is 150MB and comes with all different things (not really needed for HTML schema generation). However, what is only needed here is a &lt;em&gt;schemaDocutation.sh&lt;/em&gt; which we can run independently. So with this little script fellow we can try to strip down Oxygen to the only part required&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;mkdir -p oxygen-lite/lib

for f in `cat $OXYGEN_HOME/schemaDocumentation.sh | grep CP= | tr &amp;quot;:&amp;quot; &amp;quot;\n&amp;quot; | cut -d &amp;quot;/&amp;quot; -f3 | grep jar`
do
        file=&amp;quot;$OXYGEN_HOME/lib/$f&amp;quot;
        if [ -e $file ]
        then
                cp $file oxygen-lite/lib/$f
        fi
done

cp $OXYGEN_HOME/licensekey.txt oxygen-lite&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next step would be to combine the build with the stripped down ('lite') version of Oxygen. I used &lt;a href=&quot;https://github.com/ysb33r/groovy-vfs&quot;&gt;Groovy VFS&lt;/a&gt; DSL library to be able to process external downloads and unzip my &lt;em&gt;Oxygen-lite&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.ysb33r.gradle:vfs-gradle-plugin:1.0-beta1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    classpath &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;commons-httpclient:commons-httpclient:3.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  }
}

apply &lt;span class=&quot;key&quot;&gt;plugin&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.ysb33r.vfs&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
apply &lt;span class=&quot;key&quot;&gt;plugin&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

version = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1.0-SNAPSHOT&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

ext {
  downloadDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(buildDir, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  generatedDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(buildDir, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;generated-html&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
}

task download &amp;lt;&amp;lt; {
  mkdir downloadDir
  vfs {
    cp &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;zip:https://your-host/path-to-oxygen/oxygen-lite.zip&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    downloadDir, &lt;span class=&quot;key&quot;&gt;recursive&lt;/span&gt;:&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;overwrite&lt;/span&gt;:&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;
  }
}

download {
  description &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Downloading oxygen&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  outputs.dir downloadDir
}

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; OXYGEN_HOME = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;downloadDir&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/oxygen-lite&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; schemaFiles = [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]

apply &lt;span class=&quot;key&quot;&gt;plugin&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

version = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1.0-SNAPSHOT&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

ext {
  generatedDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(buildDir, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;generated-html&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
}

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; OXYGEN_HOME = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/opt/java/oxygen&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;        &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; schemaFiles = [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]        &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;

schemaFiles.each { pageName -&amp;gt;
  task &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;pageName&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SchemaTask&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;key&quot;&gt;type&lt;/span&gt;: JavaExec) {
    mkdir generatedDir

    classpath = files([
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/classes&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/oxygen.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/oxygenDeveloper.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/fop.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/xmlgraphics-commons-1.5.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/batik-all-1.7.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/xercesImpl.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/xml-apis.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/org.eclipse.wst.xml.xpath2.processor_1.2.0.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/icu4j.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/saxon.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/saxon9ee.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/log4j.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/resolver.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/oxygen-emf.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/commons-httpclient-3.1.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/commons-codec-1.3.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/commons-logging-1.0.4.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/httpcore-4.3.2.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/httpclient-cache-4.3.5.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/httpclient-4.3.5.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/fluent-hc-4.3.5.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/httpmime-4.3.5.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/commons-logging-1.1.3.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;OXYGEN_HOME&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/lib/commons-codec-1.6.jar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    ].toList())

    main = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ro.sync.xsd.documentation.XSDSchemaDocumentationGenerator&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    jvmArgs = [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-Djava.awt.headless=true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
    args = [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;schema/&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;pageName&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.xsd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
            &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-format:html&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
            &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-split:location&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
            &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-out:&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;generatedDir&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;pageName&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.html&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
  }
}

task schema(&lt;span class=&quot;key&quot;&gt;dependsOn&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
        tasks.matching { Task task -&amp;gt; task.name.endsWith(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SchemaTask&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)}]) {

}

defaultTasks &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-up-the-ci&quot;&gt;Setting up the CI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above script sits together with XSD schema files in the repository. Whenever a new version of XSD is issued (or a new work is initiated in a 'feature branch') our Jenkins picks up the changes and rebuild the docs. That way the schema can be viewed in a human readable name while the comments can be attached to the actual XSDs in the repository. This kind of works for us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m still not sure if Oxygen is the best tool for the job, but I couldn&amp;#8217;t find a better one (not that I was looking for it very hard). So if you have  suggestions how to proceed differently - I welcome them in comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-the-whole-build-thing&quot;&gt;Why the whole build thing?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, that&amp;#8217;s a valid question. Why taking 'a cannon for a fly' and not just didn&amp;#8217;t stick to the simple bash script. Well, the nature of such builds is they usually never stop after the first step. Having an HTML documentation generated, new ideas just started popping up my head&amp;#8230;&amp;#8203; why can&amp;#8217;t we generate actual object model out of these XSD - for a better reference. Not a problem; with &lt;a href=&quot;https://github.com/jacobono/gradle-jaxb-plugin&quot;&gt;gradle-jaxb-plugin&lt;/a&gt; it goes nearly out of the box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;jaxb {
  mkdir generatedClassedDir
  dependencies {
    jaxb &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;com.sun.xml.bind:jaxb-xjc:2.1.6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }

  xsdDir = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  episodesDir = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;build/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  xjc {
    taskClassname = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;com.sun.tools.xjc.XJCTask&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    destinationDir = generatedClassedDir
    generatePackage = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eu.ydp.flipbook.model&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    args = [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-npa&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-no-header&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What&amp;#8217;s next? The ZIP file is too massive - we can strip it. Let&amp;#8217;s just add some runtime dependencies and remove those from downloaded zip.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;goovy&quot;&gt;dependencies {
  compile 'log4j:log4j:1.2.14'
  compile 'org.apache.httpcomponents:fluent-hc:4.3.5'
  compile 'org.apache.httpcomponents:httpmime:4.3.5'
  compile 'org.apache.httpcomponents:httpclient-cache:4.3.5'
  compile 'commons-httpclient:commons-httpclient:3.1'
  compile(&amp;quot;org.apache.xmlgraphics:fop:1.1&amp;quot;) {
    exclude group: &amp;quot;org.apache.avalon.framework&amp;quot;
  }
  compile 'avalon-framework:avalon-framework-api:4.2.0'
  compile 'avalon-framework:avalon-framework-impl:4.2.0'
  compile 'xerces:xercesImpl:2.11.0'
}

//... some line stripped

schemaFiles.each { pageName -&amp;gt;
  task &amp;quot;${pageName}SchemaTask&amp;quot;(type: JavaExec) {
    mkdir generatedDir

    classpath = sourceSets.main.runtimeClasspath
    classpath += files([
      &amp;quot;$OXYGEN_HOME/&amp;quot;,
      &amp;quot;$OXYGEN_HOME/lib/oxygen.jar&amp;quot;,
      &amp;quot;$OXYGEN_HOME/lib/oxygen-emf.jar&amp;quot;,
      &amp;quot;$OXYGEN_HOME/lib/org.eclipse.wst.xml.xpath2.processor_1.2.0.jar&amp;quot;,
      &amp;quot;$OXYGEN_HOME/lib/icu4j.jar&amp;quot;,
      &amp;quot;$OXYGEN_HOME/lib/saxon.jar&amp;quot;,
      &amp;quot;$OXYGEN_HOME/lib/saxon9ee.jar&amp;quot;,
      &amp;quot;$OXYGEN_HOME/lib/resolver.jar&amp;quot;
    ].toList())
    main = 'ro.sync.xsd.documentation.XSDSchemaDocumentationGenerator'
    jvmArgs = [&amp;quot;-Djava.awt.headless=true&amp;quot;]
    args = [&amp;quot;schema/${pageName}.xsd&amp;quot;, &amp;quot;-format:html&amp;quot;, &amp;quot;-split:location&amp;quot;, &amp;quot;-out:$generatedDir/${pageName}.html&amp;quot;]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are tasks a bit harder to achieve with just a bash script - and here gradle build really show it&amp;#8217;s power.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;perfect-is-the-enemy-of-good&quot;&gt;Perfect is the enemy of good&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The rest of Oxygen XML dependencies and not findable in the central Maven repository; either custom or too old or I have no idea how to find them. But under no means it doesn&amp;#8217;t mean we cannot deploy them ourselves, save on download time and have all the dependencies properly cached by Gradle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The deployment itself is pretty easy and neatly described &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-3rd-party-jars-remote.html&quot;&gt;in this Maven mini guide&lt;/a&gt;. The only tweak we might want to do is avoiding explicit dependencies (as the build file will get a bit cluttered) and hide the hideous dependencies behind the core Oxygen deps.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2015/08/26/get-your-xsd-docs-as-build-process/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2015/08/26/get-your-xsd-docs-as-build-process/</guid>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
