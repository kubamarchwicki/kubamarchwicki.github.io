<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notepack</title>
    <description>A randomized pack of notes</description>
    <link>http://jakub.marchwicki.pl/</link>
    <atom:link href="http://jakub.marchwicki.pl/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 06 Sep 2014 20:06:24 +0000</pubDate>
    <lastBuildDate>Sat, 06 Sep 2014 20:06:24 +0000</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>Measuring developers&#39; productivity</title>
        <description>&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a work in progress. This post will evaluate with time, with two or three additional installments&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has been a while since my last post; probably couple years (which I can&amp;#8217;t even check cause as of writing this post, the whole blog is undergoing some changes). What is more, this is a totally different topic (compared to all those programming, java, EJB, etc). Yeah, things changes - including role and primary focus. So&amp;#8230;&amp;#8203; here we go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an old story: measuring productivity, setting up KPI for developers, measuring performance through metrics. So many has failed with this, still people belive this is gonna work. This hit me about a year ago, with a &quot;productivity&quot; project in my current company. Since than I though everybody has forgotten; but not. The project came around just recently so this post is more of a summary and the current state of art. I decided to go that way as metrics and measurements is something many people touches - so maybe this will be beneficial to somebody, somewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is fairly simple&amp;#8230;&amp;#8203; more work, with same number of people (dare to call them resources) within the same time box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should never talk about limited resources, just make them more productive&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Anonymous boss
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is quite popular mantra I had to deal with. So as I had no other choice and the resistance was futile - I was assimilated. And there are a few things I learned which I&amp;#8217;d like to share.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Onboarded, I had to find a better motivation. That was actually pretty easy. I had a chance to work with different teams, each team being different, delivering with difference pace, quality, the overall performance. What struggled me was that the perception of the team being productive was very subjective. Still two patterns emerged: effectiveness (how fast, how cheap) and business needs (how satisfactory, how beneficial for business).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In many cases people miss judge this choice between how fast and how good - but it&amp;#8217;s not the case. Those two (in my opinion) cover a single dimension. A team is considered good when it is delivering high quality stuff or was quickly responding to business needs. Obviously doing both simultaneously was the most desired state, but that proved to be exceptionally challenging and people start to cut corners. This is where bad things can happen, a alignment trap kicks in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I come across this term in Kavlin Henney keynote at Devoxx UK&#39;2013 &lt;a href=&quot;http://www.devoxx.com/display/UK13/Kevlin+Henney&quot;&gt;The programmer&lt;/a&gt; which brought me over to the original MIT Sloan Management Review article (dated October 2007) &lt;a href=&quot;http://sloanreview.mit.edu/article/avoiding-the-alignment-trap-in-it/&quot;&gt;Avoiding the Alignment Trap in IT&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The whole article is worth reading, but the overall punchline can be summarized in this picture&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/2014-08-25-measuring-developers-productivity/alignment-trap.png&quot; alt=&quot;alignment trap&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think the important zones are: trapped and well-oiled teams. In real life the latter knows where to stop saying: &lt;em&gt;&quot;we developed a wrong thing. Sorry. But that&amp;#8217;s not a big problem. We did it well, so we can fix it easily&quot;&lt;/em&gt;. While the alignment team doesn&amp;#8217;t have the craft (not talking here about software craftsmanship for a reason) says: &lt;em&gt;&quot;we have no idea what we are doing, but we have another deadline. Things doesn&amp;#8217;t go well but we don&amp;#8217;t have time to improve&quot;&lt;/em&gt;. I think this might sound familiar.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;simple-but-not-simplistic&quot;&gt;Simple but not simplistic&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So how to avoid the alignment trap. Even though it might seem it&amp;#8217;s not directly correlated with measuring productivity, I found it important and the basis of further work. Avoiding the alignment trap appeared to me as a pure agile: work with business, respond to change, while being flexible, adaptive, etc. As I wrote before, doing both at the same time is hard to achieve, even harder to describe. In many cases people ten to cut corners - and as shown on image - sacrifice on in favor of the other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It doesn&amp;#8217;t make much sense to focus on a single dimension. What is more, those two does not seem to be that straight forward. If we tackle effectiveness, here comes another thing to remember:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s critical to know if a low cost service is a result of higher efficiency
or lower quality (from &lt;a href=&quot;https://twitter.com/venkat_s/status/350639583056244736&quot;&gt;Twitter&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Venkat Subramaniam
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This might sound weird why those two parameters; after all quality it not an edge on an iron project management triangle; it&amp;#8217;s scope, time and budget.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One reason is because scope is very subjective and related to business needs (alignment dimension - in a second), while budget is a derivative of time; in most IT projects &lt;code&gt;budget = people * time&lt;/code&gt; where people is usually constant. Measuring one is enough, so &lt;em&gt;how efficent&lt;/em&gt; means usually &lt;em&gt;how fast&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quality is another story: it&amp;#8217;s where the shortcuts can be taken, without being visible in a short term (subject for another article). Others are visible immediately. I can imagine a team (not saying that I&amp;#8217;ve seen such teams), which is highly aligned, responds to change, is aware of business needs, but doesn&amp;#8217;t really know what to do and each new requirement cause a set of new &lt;em&gt;ifs&lt;/em&gt; in code and even more &lt;em&gt;duct tape programming&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, what about team itself. So far we mostly tackled outcomes, but what about morale, motivation and an overall team happiness. Does it fall into an alignment dimension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This leads to a new realization, there should be four domains / perspectives for measuring teams (developers):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;productivity (how fast)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;quality (how good)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;value (how valuable to business)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;happiness (how motivated)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I though I was pretty innovative with this outcome, but it appeared to be beginners luck. Similar approach suggested &lt;a href=&quot;http://www.poddrzewem.pl&quot;&gt;Tomek Włodarek&lt;/a&gt; during on of this presentations &lt;a href=&quot;http://www.poddrzewem.pl/do-pobrania/cat_view/44-prezentacje-odczyty-konferencje&quot;&gt;Are we agile yet?&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/2014-08-25-measuring-developers-productivity/productivity-perspectives.png&quot; alt=&quot;productivity perspectives&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;measuring-productivity-in-wider-context&quot;&gt;Measuring productivity in wider context&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we know single metric isn&amp;#8217;t enough, multiple perspectives are desired. Before I get into particular metrics and indexes, there is one more things needs tackling: why a wider context, multiple dimensions are required. In the previous paragraph I touched it, but it was an iceberg&amp;#8217;s tip.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Evaluate on metrics&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-up-the-metrics-and-indexes&quot;&gt;Setting up the metrics and indexes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Where to get the data from&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some recipes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sample questionnaires&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dungeons-and-dragons&quot;&gt;Dungeons and Dragons&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1920 Western Electric experiment (Elton Mayo)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heisenberg principle for developers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goodhart&amp;#8217;s law&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Campbell&amp;#8217;s Law&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 25 Aug 2014 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2014/08/25/measuring-developers-productivity/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2014/08/25/measuring-developers-productivity/</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>33degree 2014 Braindump</title>
        <description>&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;think-for-yourself-marry-poppendieck&quot;&gt;Think for yourself; Marry Poppendieck&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What great software engineers do: Sharpen the saw (develop expertise), share responsibility (deliver a real value), see the shadow of the future (make the world a better place)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Positive psychology. Started by Mihaly Csikszentmihalyi - when he started to write what&amp;#8217;s good with you people as opposed to most psychologist who wrote what&amp;#8217;s bad with you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elements needed to become an expert: Coach, challenge, feedback, steady progress towards getting things done&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brilliant Systems. Mental model match: those developing the system and those actually using the system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;App idea: the education datapalooza - as the Health Data Initiative Forum. The Health Datapalooza.
Gather, collect and open the data for everybody&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;healthcare.gov - everybody did their job, according to the spec. But all together - it didn&amp;#8217;t work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;moving delivery organization to engineering organization:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;delivery organization are becoming obsolete. Analyze how the time is spent in the organization (a practical approach to large scale agile development. Gary Gruver, Mike Yound and Pat Fulghum)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;accept you are wasting money on planning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lack of control is not a problem. Instant feedback is a better way to control the process&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/2014-06-09-33degree-braindump/mpoppendieck5.jpg&quot; alt=&quot;mpoppendieck5&quot; width=&quot;600px&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/2014-06-09-33degree-braindump/mpoppendieck6.jpg&quot; alt=&quot;mpoppendieck6&quot; width=&quot;600px&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/2014-06-09-33degree-braindump/mpoppendieck1.jpg&quot; alt=&quot;mpoppendieck1&quot; width=&quot;600px&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/2014-06-09-33degree-braindump/mpoppendieck2.jpg&quot; alt=&quot;mpoppendieck2&quot; width=&quot;600px&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/2014-06-09-33degree-braindump/mpoppendieck3.jpg&quot; alt=&quot;mpoppendieck3&quot; width=&quot;600px&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/2014-06-09-33degree-braindump/mpoppendieck4.jpg&quot; alt=&quot;mpoppendieck4&quot; width=&quot;600px&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;managers-are-from-mars-ted-newards&quot;&gt;Managers are from Mars; Ted Newards&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Read more about Frederick Winslow Taylor. Taylor coined: you can&amp;#8217;t manage if you cannot measure.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s said that this statement is flawed and was made up&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alan Cooper. &quot;The Inmates are Running the Asylum&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;nie-koduj-pisz-prozę-sławek-sobotka&quot;&gt;Nie koduj, pisz prozę; Sławek Sobotka&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best quotes from Slawek Sobotka:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;wszyscy wypróżniaja sie do tego samego Gita&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;encja na twarz i pchasz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metody szacowania&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Metoda szacowania L.W.P.z.D. &quot;Liczby Wyciągnięte Prosto z Dupy&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metoda Parkinsona&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;techniki lingwistyczne przy opisie historyjki: okazuje sie ze Wasze panie od polskiego prawie programowaly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;w obiektowych programowaniu lubimy od tylu: reguły &amp;#8594; znaczenie (kontekst) &amp;#8594; słowa&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sesja modelowania ze smutnymi ludźmi! nie używaj bleh albo blah to używaj greckich liter. Faktura razy dwa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;na samym końcu dobieraj słowa - jak zrozumiesz kontekst i znaczenie na podstawie reguł&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;co sie dzieje na sesji CRC zostaje na sesji CRC&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to była młodość. Chormony budują. Pierwszy wąs i Dune2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dobry obiekt jest&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;apatyczny. Nie chce mu sie robić&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;introwertyczny. Obiekty nie wchodzą z butami w inne obiekty&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;samolubny. Robi tylko swoje&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;switche pisze senior, junior pisze ify&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hiper wymiarowa macierz statusów&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;podstawowa zasada w aplikacjach biznesowych to zmapowac (map), zredukować (reduce) i zwinąć w lewo (foldleft)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integracja: jeden demon sie wypróżnia a drugi sprawdza czy juz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twoj model biznesu jest suma błędów poprzednich pokoleń.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Klucz obcy to biznes znalazł u zony w torebce. Trafiłes w czuły punkt, nie dziw się że nie chcą z Tobą gadać.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/2014-06-09-33degree-braindump/ssobotka.jpg&quot; alt=&quot;ssobotka&quot; width=&quot;600px&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-missing-link-of-agile-paweł-badenski&quot;&gt;The missing link of agile; Paweł Badenski&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;minimize threat (you a run away from) and maximize reward (walk towards)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;every social interaction on the project relates to the above&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;also feedback&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feedback. Is an observation not judgement&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;improve people&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Antipatterns&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;feedback avoidance&lt;br&gt;
Little threat in small batches (30minutes a day) is less worse than one big threat.  Avoid the lizard brain, approach feedback mindfully&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;giving advice&lt;br&gt;
Objective feedback. From non violent communication. Refer to objectives: things you see and feel. Noone can argue with that, it&amp;#8217;s very yours&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lizard response: fight, flight or freeze&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TED talks on neuroscience &lt;a href=&quot;http://blog.ketyov.com/2011/01/top-10-neuroscience-ted-talks.html&quot; class=&quot;bare&quot;&gt;http://blog.ketyov.com/2011/01/top-10-neuroscience-ted-talks.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emotional intelligence is the basic tool for software developer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;corrective feedback&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;watch out bully language. Judgement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;feedback is always subjective&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;label the feelings - it&amp;#8217;s easier to handle the emotions when you know what it is&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;go-reactive-roland-kuhn&quot;&gt;Go Reactive; Roland Kuhn&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;starting point: the user&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;user is not necessarily a human.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;responsiveness: always available, interactive, (near) real time&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;not http timeout! much faster, appropriate for service&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;resilience. Responsive in the face of failure&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one failure should not take down all other containers (comportment construction as if Titanic)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;same happens for application servers: each application server is a compartment, which cascades the other nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;asynchronous calls cause synchronous calls implies coupling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;make somebody&amp;#8217;s else exception somebody else problem. Failer response goes to the owner, all other response returns to the user&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CAP theorem. Consistence. Availability. Partion tolerance. Theorem is proven impossible to have all three.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;does it really needed? Who needs it?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;take ATMs. You cannot got all three at the same time, otherwise you won&amp;#8217;t be able to take money in certain situations (offline)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;saiku-taking-olap-databases-into-21st-century-tomek-nurkiewicz&quot;&gt;Saiku – taking OLAP databases into 21st century; Tomek Nurkiewicz&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;great talk from Tomek, heard him for the first time - my bad&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;project for BigData. OpenSource OLAP cubes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;exploring-nashorm-vankat-subramaniam&quot;&gt;Exploring Nashorm; Vankat Subramaniam&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&quot;JavaScript treats you like a guest in its house. It never complains and quietly laughs at you behind your back&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this idea: coffescript DSL run in the Server side as script with Nashorn&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-define-success-at-your-level-kai-gilb&quot;&gt;How to define Success at your level; Kai Gilb&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;focus on values. Connect stakeholder with values and derive requirements from that&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keep iterations small. Week at most&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gilb.com//dl820&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2014/06/09/33degree-braindump/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2014/06/09/33degree-braindump/</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Building POJO in an elegant way</title>
        <description>&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any fool can write code that a computer can understand. Good programmers write code that humans can understand&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Martin Fowler - Refactoring: Improving the Design of Existing Code
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In one of my recent projects I’ve come across a wonderful way of building data beans (POJOs), called builders. See how it works; imagine a fairly simple POJO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Person {
  private String name;
  private String surname;

  /* getters and setters skipped for brevity */
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can imagine two ways to instantiate this class and populate values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	Person person = new Person();
	person.setName(“John”);
	person.setSurname(“Smith”);

	new Person(“John”, “Smith”);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While with this fairly simple class it doesn’t look bad, with more complicated beans, the code starts to get messy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So here comes the smart way – with builders. For each POJO create an inner class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Person {
   private String name;
   private String surname;

   /* explicite constructors, getters and setters skipped */

   private Person(Builder builder) {
       this.name = builder.name;
       this.surname = builder.surname;
   }

   public static class Builder {
       private String name;
       private String surname;

       public Builder() {

       }

       public Builder withName(String name) {
           this.name = name;
           return this;
       }

       public Builder withSurname(String surname) {
           this.surname = surname;
           return this;
       }

       public Person build() {
           return new Person(this);
       }
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So from now on creating instance of a Person looks like this&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Person person = new Person.Builder()
  .withName(“John”)
  .withSurname(“Smith”)
  .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nice one, isn’t it? It gets even better when the object gets more complex. The only disadvantage I found so far was a necessity to hand craft all the builders – hundreds of pretty-much-same-lines-of-code. But what are templates for?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Initially, I’ve considered internal Eclipse templates. Nice, but too simple and static (I couldn’t find a way to prepare dynamic templates, based on a class I was currently developing). Nonetheless, I found quite a few guides how to leverage templates worth sharing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.tarantsov.com/eclipse/templates/&quot; class=&quot;bare&quot;&gt;http://www.tarantsov.com/eclipse/templates/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipse.dzone.com/news/effective-eclipse-custom-templ&quot; class=&quot;bare&quot;&gt;http://eclipse.dzone.com/news/effective-eclipse-custom-templ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A second try was a Fast Code Eclipse plugin (which you can find here: &lt;a href=&quot;http://fast-code.sourceforge.net/&quot; class=&quot;bare&quot;&gt;http://fast-code.sourceforge.net/&lt;/a&gt;). Honestly speaking, it’s a little bit overcomplicated and I’d be rather consider something simpler (Eclipse Code Templates with dynamic fields – maybe I’d write something like that at some point). Nonetheless, Fast Code works like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;install plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;go to Window &amp;gt; Preferences &amp;gt; Fast Code Preferences &amp;gt; Template Preferences&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pick up one (I’ve chosen the first one: Template Instance of Class)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set “Number Required Classes” to 1, “Allowed File Extension” to java, “Required Getter Setter” to None and paste this in the template body:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-velocity&quot; data-lang=&quot;velocity&quot;&gt;private ${class_name}(Builder builder) {
#foreach ($field in ${fields})
   this.${field.name} = builder.${field.name};
#end
}

public static class Builder {
#foreach ($field in ${fields})
   private ${field.type} ${field.name};
#end

#foreach ($field in ${fields})
   public Builder with${field.getter.substring(3)}(${field.type} ${field.name}) {
       this.${field.name} = ${field.name};
       return this;
   }
#end

public ${class_name} build() {
           return new ${class_name}(this);
       }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Builders in action work like this: create a new class (like the aforementioned Person, with all intended fields) and run your template:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fast Code &amp;gt; Create New Snippet (or press Shift + Ctrl + Alt + T)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pick up “Instance of Class”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose the class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pick up fields to be used by the builder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Format your code (Shift + Ctrl + F).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Works like a charm! I know that it does not as the most straightforward activity, but trust me – it really improved my productivity and improved the code quality (no more typos). I’m also aware that I’m using a tiny fraction of Fast Code functionality – but that’s a fraction I was really keen on.&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 10 Nov 2010 00:00:00 +0000</pubDate>
        <link>http://jakub.marchwicki.pl/posts/2010/11/10/building-pojo-in-elegant-way/</link>
        <guid isPermaLink="true">http://jakub.marchwicki.pl/posts/2010/11/10/building-pojo-in-elegant-way/</guid>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
